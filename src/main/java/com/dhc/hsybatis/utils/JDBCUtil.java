package com.dhc.hsybatis.utils;

import com.dhc.hsybatis.DbConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.util.FileCopyUtils;

import javax.annotation.Resource;
import java.sql.*;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;

/**
 * @ClassName JDBCUtil
 * @Description TODO
 * @Date: 2019/12/11 15:03
 * @Author dhc5953
 **/

public final class JDBCUtil {

    /*声明一个 Connection类型的静态属性，用来缓存一个已经存在的连接对象*/
    private static Connection conn;

    private static final Logger LOG = LoggerFactory.getLogger(JDBCUtil.class);

    private static ResourceBundle rb = ResourceBundle.getBundle("db");

    private static final String driveClassName = rb.getString("drive.class.name");

    private static final String dbUrl = rb.getString("db.url");

    private static final String username = rb.getString("db.username");

    private static final String password = rb.getString("db.password");

    private static final boolean autoCommit = Boolean.parseBoolean(rb.getString("db.autocommit"));

    static {
        config();
    }

    /**
     * 装填db配置信息
     */
    private static void config() {

    }


    /**
     * 载入数据库驱动类
     * @return true or  false
     */
    private static boolean init() {
        try{
            Class.forName(driveClassName);
            return true;
        }catch (Exception e){
            e.printStackTrace();
        }
        return false;
    }


    /**
     * 检测当前连接是否可用
     * @return true 可用 or false 不可用
     */
    private static boolean isValid(){
        if(null != conn){
            try{
                if(!conn.isClosed() && conn.isValid(3)){
                    return true;
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        return false;
    }


    /**
     * 建立数据库连接
     * @return 数据库连接对象
     */
    private static Connection connect(){
        if(isValid()){
            return conn;
        }
        try{
            boolean isSuccess = init();
            if(isSuccess){
                conn = DriverManager.getConnection(dbUrl,username,password);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return conn;
    }


    /**
     * 是否自动提交事务
     */
    private static void transaction(){
        try{
            conn.setAutoCommit(autoCommit);
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * 创建Statement对象
     * @return Statement对象
     */
    private static Statement statement(){
        Statement statement = null;
        connect();
        transaction();
        try{
            statement = conn.createStatement();
        }catch (Exception e){
            LOG.error("创建Statement对象失败");
        }
        return statement;
    }


    /**
     * 根据给定的带参数占位符的SQL语句,创建PreparedStatement对象
     * @param sql 带参数占位符的sql语句
     * @param autoGeneratedKeys 是否返回keys
     * @return 返回相应的PreparedStatement对象
     */
    private static PreparedStatement preparedStatement(String sql,boolean autoGeneratedKeys){
        PreparedStatement preparedStatement = null;
        connect();
        transaction();
        try{
            if(autoGeneratedKeys){
                preparedStatement = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
            }else{
                preparedStatement = conn.prepareStatement(sql);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return preparedStatement;
    }


    public static ResultSet query(String sql, List<Object> params){
        if("".equals(sql) || null == sql || !sql.trim().toLowerCase().startsWith("select")){
            throw new RuntimeException("sql语句错误");
        }
        ResultSet rs = null;

        if(params != null && params.size() > 0){ //传入参数
            PreparedStatement ps = preparedStatement(sql, false);
            try{
                for (int i = 0; i < params.size(); i++) {
                    ps.setObject(i + 1,params.get(i));
                }
                rs = ps.executeQuery();
            }catch (Exception e){
                e.printStackTrace();
            }
        }else{
            Statement st = statement();
            try {
                rs = st.executeQuery(sql);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return rs;
    }


    private static Object typeof(Object o){

        if(o instanceof Timestamp){
            return o;
        }

        if(o instanceof Date){
            Date date = (Date) o;
            return new java.sql.Date(date.getTime());
        }

        if(o instanceof Character || o.getClass() == char.class){
            return String.valueOf(o);
        }
        return o;
    }

    public static boolean execute(String sql, Object... params) {
        if("".equals(sql) || null == sql || sql.trim().toLowerCase().startsWith("select")){
            throw new RuntimeException("sql语句错误");
        }


        /*标识DDL或DML是否执行成功的一个标识*/
        boolean flag = false;
        sql = sql.trim().toLowerCase();

        //获取sql语句的前缀
        String prefix = sql.substring(0,sql.indexOf(" "));

        //操作类型
        String operationType = "";
        switch (prefix){
            case "create":
                operationType = "create table";
                break;
            case "alter":
                operationType = "update table";
                break;
            case "drop":
                operationType = "drop table";
                break;
            case "truncate":
                operationType = "truncate table";
                break;
            case "insert":
                operationType = "insert :";
                break;
            case "update":
                operationType = "update :";
                break;
            case "delete":
                operationType = "delete :";
                break;
        }
        //判断是否有参数
        if(params != null && params.length > 0){
            PreparedStatement ps = preparedStatement(sql, false);
            Connection c = null;
            try {
                c = ps.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            }

            try{
                for (int i = 0; i < params.length; i++) {
                    Object obj = typeof(params[i]);
                    ps.setObject(i + 1,obj);
                }

                ps.executeUpdate();

            }catch (Exception e){e.printStackTrace();}
        }
        return false;
    }



    /** 提交事务 */
    private static void commit(Connection c) {
        if (c != null && !autoCommit) {
            try {
                c.commit();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }




}
